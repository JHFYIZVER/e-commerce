generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}


model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  image         String?
  password      String?
  emailVerified DateTime?
  role          Role     @default(user)

  accounts      Account[]
  sessions      Session[]
  order         Order[]
  cart          Cart?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}


model Cart {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartProduct  CartProduct[]

  @@map("carts")
}

model CartProduct {
  id               String   @id @default(cuid())
  cartId           String   @map("cart_id")
  cart             Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariantId String   @map("product_variant_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("cart_products")
}


model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  product Product[]

  @@map("categories")
}

model Brand {
  id      String   @id @default(cuid())
  name    String   @unique
  product Product[]

  @@map("brands")
}

model MemoryOption {
  id      String  @id @default(cuid())
  size    Int     @unique
  unit    String  @default("GB")
  label   String
  variants ProductVariant[]

  @@map("memory_options")
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String   @db.Text
  bestseller     Boolean  @default(false)
  picture        String
  article        Int
  categoryId     String   @map("category_id")
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  brandId        String   @map("brand_id")
  brand          Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  variants       ProductVariant[]
  specifications ProductsSpecification[]

  @@map("products")
}

model ProductVariant {
  id        String       @id @default(cuid())
  productId String       @map("product_id")
  memoryId  String       @map("memory_id")
  price     Int
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  memory    MemoryOption @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  cartProduct CartProduct[]
  orderProduct OrderProduct[]

  @@map("product_variants")
}

model ProductsSpecification {
  id          String    @id @default(cuid())
  productId   String    @map("product_id")
  name        String
  description String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("products_specifications")
}


model Order {
  id            String         @id @default(cuid())
  totalPrice    Int
  userId        String         @map("user_id")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderProduct  OrderProduct[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("orders")
}

model OrderProduct {
  id               String    @id @default(cuid())
  productVariantId String    @map("product_variant_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  count            Int
  order            Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String    @map("order_id")

  @@map("order_products")
}
